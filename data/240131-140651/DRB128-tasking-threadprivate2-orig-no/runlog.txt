Taskracer detects TSAN runtime, carrying out race detection using DPST
Computation Graph recording enabled
[implicit_task] initial task begin 
[task_create] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB128-tasking-threadprivate2-orig-no.c, line: 38, col: 3 
[task_schedule] next task starting node 2 
[task_create] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB128-tasking-threadprivate2-orig-no.c, line: 27, col: 3 
[task_schedule] next task starting node 4 
[task_create] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB128-tasking-threadprivate2-orig-no.c, line: 32, col: 7 
[task_schedule] next task starting node 6 
[task_schedule] previous task end node 6 @@@ [task_schedule] next task starting node 7 
[task_schedule] previous task end node 7 @@@ [task_schedule] next task starting node 5 
[task_schedule] previous task end node 5 @@@ [task_schedule] next task starting node 3 
[implicit_task] initial task end, parallel region is (nil), current step is 3 
JSON data written to 'data/rawgraphml.json'

 
ConcurrencyVector constructor, capacity is 200000000 
Example of tsan interface (__tsan_print) 
