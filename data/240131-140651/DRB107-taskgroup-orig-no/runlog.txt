Taskracer detects TSAN runtime, carrying out race detection using DPST
Computation Graph recording enabled
[implicit_task] initial task begin 
[parallel_begin] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB107-taskgroup-orig-no.c, line: 57, col: 1 
[task_create] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB107-taskgroup-orig-no.c, line: 63, col: 1 
[task_schedule] next task starting node 12 
[task_schedule] previous task end node 12 @@@ [task_schedule] next task starting node 13 
[task_create] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB107-taskgroup-orig-no.c, line: 69, col: 1 
[task_schedule] next task starting node 15 
[task_schedule] previous task end node 15 @@@ [task_schedule] next task starting node 17 
[parallel_end] current node is 2, requested parallelsim is 8, [parallel_end] file: /home/fjin/gitRepo/dataracebench/micro-benchmarks/DRB107-taskgroup-orig-no.c, line: 75, col: 26 
result=2
[implicit_task] initial task end, parallel region is (nil), current step is 33 
JSON data written to 'data/rawgraphml.json'

 
ConcurrencyVector constructor, capacity is 200000000 
Example of tsan interface (__tsan_print) 
